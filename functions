# COLORS
export BLACK="$(tput setaf 0)"
export RED="$(tput setaf 1)"
export GREEN="$(tput setaf 2)"
export YELLOW="$(tput setaf 3)"
export BLUE="$(tput setaf 4)"
export PURPLE="$(tput setaf 5)"
export CYAN="$(tput setaf 6)"
export WHITE="$(tput setaf 7)$(tput bold)"
export GRAY="$(tput setaf 7)"

export BG_BLACK="$(tput setab 0)"
export BG_RED="$(tput setab 1)"
export BG_GREEN="$(tput setab 2)"
export BG_YELLOW="$(tput setab 3)"
export BG_BLUE="$(tput setab 4)"
export BG_PURPLE="$(tput setab 5)"
export BG_CYAN="$(tput setab 6)"
export BG_WHITE="$(tput setab 7)$(tput bold)"
export BG_GRAY="$(tput setab 7)"

export NO_COLOUR="$(tput sgr0)"
export REVERSE="$(tput rev)"
export BOLD="$(tput bold)"
export UNDERLINE="$(tput smul)"

# Create a new directory and enter it
function mkd() {
  mkdir -p "$@" && cd "$@"
}


# Extra many types of compressed packages
# Credit: http://nparikh.org/notes/zshrc.txt
extract() {
  if [ -f "$1" ]; then
    case "$1" in
      *.tar.bz2)  tar -jxvf "$1"                        ;;
      *.tar.gz)   tar -zxvf "$1"                        ;;
      *.bz2)      bunzip2 "$1"                          ;;
      *.dmg)      hdiutil mount "$1"                    ;;
      *.gz)       gunzip "$1"                           ;;
      *.tar)      tar -xvf "$1"                         ;;
      *.tbz2)     tar -jxvf "$1"                        ;;
      *.tgz)      tar -zxvf "$1"                        ;;
      *.zip)      unzip "$1"                            ;;
      *.ZIP)      unzip "$1"                            ;;
      *.pax)      cat "$1" | pax -r                     ;;
      *.pax.Z)    uncompress "$1" --stdout | pax -r     ;;
      *.Z)        uncompress "$1"                       ;;
      *) echo "'$1' cannot be extracted/mounted via extract()" ;;
    esac
  else
     echo "'$1' is not a valid file to extract"
  fi
}

# Quickly navigate your filesystem from the command-line
# From: http://jeroenjanssens.com/2013/08/16/quickly-navigate-your-filesystem-from-the-command-line.html
export MARKPATH=$HOME/.marks
function jump {
    cd -P "$MARKPATH/$1" 2>/dev/null || echo "No such mark: $1"
}
function mark {
    mkdir -p "$MARKPATH"; ln -s "$(pwd)" "$MARKPATH/$1"
}
function unmark {
    rm -i "$MARKPATH/$1"
}
function marks {
    ls -l "$MARKPATH" | sed 's/  / /g' | cut -d' ' -f9- | sed 's/ -/\t-/g' && echo
}

_completemarks() {
  local curw=${COMP_WORDS[COMP_CWORD]}
  local wordlist=$(find $MARKPATH -type l -printf "%f\n")
  COMPREPLY=($(compgen -W '${wordlist[@]}' -- "$curw"))
  return 0
}

complete -F _completemarks jump unmark

# adapted from https://github.com/builddoctor/maven-antsy-color/blob/master/mvn
# thanks to:  http://blog.blindgaenger.net/colorize_maven_output.html
# and: http://johannes.jakeapp.com/blog/category/fun-with-linux/200901/maven-colorized
# Colorize Maven Output
alias maven="command mvn"
function color_maven() {

    maven "$@" | sed \
        -e "s/Tests run: \([^,]*\), Failures: \([^,]*\), Errors: \([^,]*\), Skipped: \([^,]*\)/${GREEN}Tests run: \1$NO_COLOUR, Failures: $BOLD$RED\2$NO_COLOUR, Errors: $BOLD$YELLOW\3$NO_COLOUR, Skipped: $PURPLE\4$NO_COLOUR/g" \
        -e "s/\(\[\{0,1\}WARN\(ING\)\{0,1\}\]\{0,1\}.*\)/$PURPLE\1$NO_COLOUR/g" \
        -e "s/\(\[ERROR\].*\)/$RED\1$NO_COLOUR/g" \
        -e "s/\(\(BUILD \)\{0,1\}FAILURE.*\)/$RED\1$NO_COLOUR/g" \
        -e "s/\(\(BUILD \)\{0,1\}SUCCESS.*\)/$GREEN\1$NO_COLOUR/g" \
        -e "s/\(\[INFO\] [^-].*\)/\1$NO_COLOUR/g" \
        -e "s/\(\[INFO\] Building.*\)/$GREEN\1$NO_COLOUR/g" \
        -e "s/\(\[INFO\] +.*\)/$CYAN\1$NO_COLOUR/g" \
        -e "s/\(\[INFO\] -.*\)/$BLUE\1$NO_COLOUR/g" \
        -e "s/\(Feature:.*\)/$BOLD$BLUE\1$NO_COLOUR/g"
    return $PIPESTATUS
}
alias mvn=color_maven


function colors() {
  echo -e $BLACK           "black             " $REVERSE "reverse" $NO_COLOUR
  echo -e $RED             "red               " $REVERSE "reverse" $NO_COLOUR
  echo -e $GREEN           "green             " $REVERSE "reverse" $NO_COLOUR
  echo -e $YELLOW          "yellow            " $REVERSE "reverse" $NO_COLOUR
  echo -e $BLUE            "blue              " $REVERSE "reverse" $NO_COLOUR
  echo -e $PURPLE          "purple            " $REVERSE "reverse" $NO_COLOUR
  echo -e $CYAN            "cyan              " $REVERSE "reverse" $NO_COLOUR
  echo -e $WHITE           "white             " $REVERSE "reverse" $NO_COLOUR
  echo -e $GRAY            "gray              " $REVERSE "reverse" $NO_COLOUR

  echo -e $BOLD$BLACK      "bold black        " $REVERSE "reverse" $NO_COLOUR
  echo -e $BOLD$RED        "bold red          " $REVERSE "reverse" $NO_COLOUR
  echo -e $BOLD$GREEN      "bold green        " $REVERSE "reverse" $NO_COLOUR
  echo -e $BOLD$YELLOW     "bold yellow       " $REVERSE "reverse" $NO_COLOUR
  echo -e $BOLD$BLUE       "bold blue         " $REVERSE "reverse" $NO_COLOUR
  echo -e $BOLD$PURPLE     "bold purple       " $REVERSE "reverse" $NO_COLOUR
  echo -e $BOLD$CYAN       "bold cyan         " $REVERSE "reverse" $NO_COLOUR
  echo -e $BOLD$WHITE      "bold white        " $REVERSE "reverse" $NO_COLOUR

  echo -e $BG_BLACK  "black            "$NO_COLOUR
  echo -e $BG_RED    "red              "$NO_COLOUR
  echo -e $BG_GREEN  "green            "$NO_COLOUR
  echo -e $BG_YELLOW "yellow           "$NO_COLOUR
  echo -e $BG_BLUE   "blue             "$NO_COLOUR
  echo -e $BG_PURPLE "purple           "$NO_COLOUR
  echo -e $BG_CYAN   "cyan             "$NO_COLOUR
  echo -e $BG_WHITE  "white            "$NO_COLOUR
  echo -e $BG_GRAY   "gray             "$NO_COLOUR

  echo -e " default           " $REVERSE "reverse" $NO_COLOUR
}


# Explain bash function call
# https://www.mankier.com/blog/explaining-shell-commands-in-the-shell.html?hn=1
# Add this to ~/.bash_profile or ~/.bashrc
# Update 26-03-2015. If using this command gives no output, see if running a simple fetch causes this error:
# $ curl https://www.mankier.com
# curl: (35) Cannot communicate securely with peer: no common encryption algorithm(s).
# If so, try specifying a cipher in the curl commands: curl --ciphers ecdhe_ecdsa_aes_128_sha
explain () {
  if [ "$#" -eq 0 ]; then
    while read  -p "Command: " cmd; do
      curl -Gs "https://www.mankier.com/api/explain/?cols="$(tput cols) --data-urlencode "q=$cmd"
    done
    echo "Bye!"
  elif [ "$#" -eq 1 ]; then
    curl -Gs "https://www.mankier.com/api/explain/?cols="$(tput cols) --data-urlencode "q=$1"
  else
    echo "Usage"
    echo "explain                  interactive mode."
    echo "explain 'cmd -o | ...'   one quoted command to explain it."
  fi
}

ctail() {
  tail -f "$@" | \
  awk -Winteractive '{\
  if ($0 ~ /INFO/) print "\033[32m" $0; \
  else if ($0 ~ /DEBUG/) print "\033[37m" $0; \
  else if ($0 ~ /SEVERE|ERROR/) print "\033[31m" $0; \
  else if ($0 ~ /WARN/) print "\033[33m" $0; \
  else print $0; \
  }'
}
